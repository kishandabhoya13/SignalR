@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@model ChatMessage
<h2>WebSocket Chat Application</h2>
<h3>@Model.Username Chat with @Model.ReceiverUsername</h3>
<div class="message-main-div">
    <div class="message-div">
        <ul id="messagesList"></ul>
        <input type="text" id="messageInput" placeholder="Write a message..." onkeypress="handleKeyPress(event)" />
        <button id="sendButton" onclick="sendMessage()">Send</button>
    </div>
</div>
<script>
    connection.start()
        .then(() => {
            connection.invoke("Connect", "@Model.Username");
        })
        .catch(err => console.error(err.toString()));


    let socket;
    const username = "@Model.Username";
    const receiverUsername = "@Model.ReceiverUsername";
    console.log("username ::: ", username);
    init();
    function init() {
        socket = new WebSocket('wss://localhost:7137/ws');
        socket.onopen = () => {
            console.log('WebSocket connection established.');

            // Send an initial message to register the username
            const initMessage = {
                Username: username,
                //ReceiverUsername: "@Model.ReceiverUsername",
                message: `${username} has joined the chat!`
            };
            socket.send(JSON.stringify(initMessage));
        };


        //this method Execute when Message come from different users

        socket.onmessage = (event) => {

            const messagesList = document.getElementById('messagesList');
            const msgData = JSON.parse(event.data);

            if (receiverUsername == msgData.Username && username == msgData.ReceiverUsername) {
                const li = document.createElement('li');
                li.className = 'message received';
                li.textContent = `${receiverUsername}: ${msgData.Message}`;

                const now = new Date();
                const formattedDateTime = now.toLocaleString();

                const dateSpan = document.createElement('span');
                dateSpan.className = 'message-date';
                dateSpan.textContent = formattedDateTime;

                li.appendChild(dateSpan);

                messagesList.appendChild(li);
                messagesList.scrollTop = messagesList.scrollHeight;
            } else {

                var NotificationMessage = `${msgData.Username} Send Message : ${msgData.Message}`;
                toastr.info(NotificationMessage);
            }
        };

        socket.onclose = () => {
            console.log('WebSocket connection closed.');
        };
    }

    //Send Message function call on Send button

    function sendMessage() {
        const messageInput = document.getElementById('messageInput');
        const message = {
            ReceiverUsername: "@Model.ReceiverUsername",
            message: messageInput.value,
            Username: username
        };

        socket.send(JSON.stringify(message));
        const li = document.createElement('li');
        li.className = 'message sent';
        li.textContent = `${username}: ${messageInput.value}`;

        const now = new Date();
        const formattedDateTime = now.toLocaleString();

        const dateSpan = document.createElement('span');
        dateSpan.className = 'message-date';
        dateSpan.textContent = formattedDateTime;

        li.appendChild(dateSpan);

        document.getElementById('messagesList').appendChild(li);
        messageInput.value = '';
        document.getElementById('messagesList').scrollTop = document.getElementById('messagesList').scrollHeight;

        //var NotificationMessage = `${message.Username} Send Message : ${message.message}`;
        //connection.invoke("SendNotification", "@Model.ReceiverUsername", NotificationMessage);
    }

    function handleKeyPress(event) {
        if (event.key === 'Enter') {
            event.preventDefault();
            sendMessage();
        }
    }
</script>